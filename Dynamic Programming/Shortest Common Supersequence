/*   Given two strings X and Y of lengths m and n respectively, find the length of the smallest string which has both, X and Y as its sub-sequences.
Note: X and Y can have both uppercase and lowercase letters.

Example 1

Input:
X = abcd, Y = xycd
Output: 6
Explanation: Shortest Common Supersequence
would be abxycd which is of length 6 and
has both the strings as its subsequences.
Example 2

Input:
X = efgh, Y = jghi
Output: 6
Explanation: Shortest Common Supersequence
would be ejfghi which is of length 6 and
has both the strings as its subsequences.
Your Task:
Complete shortestCommonSupersequence() function that takes X, Y, m, and n as arguments and returns the length of the required string.

Expected Time Complexity: O(Length(X) * Length(Y)).
Expected Auxiliary Space: O(Length(X) * Length(Y)).

Constraints:
1<= |X|, |Y| <= 100  */



import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
	    Scanner sc=new Scanner(System.in);
	    int t=sc.nextInt();
	    while(t-->0){
	        String s1=sc.next();
	        String s2=sc.next();
	        int n1=s1.length(),n2=s2.length();
	        int res=n1+n2-lcs(s1,s2,n1,n2);
	        System.out.println(res);
	    }
	}
	static int lcs(String s1,String s2,int n1,int n2){
	    int dp[][]=new int[n1+1][n2+1];
	    for(int i=1;i<=n1;i++){
	        for(int j=1;j<=n2;j++){
	            if(s1.charAt(i-1)==s2.charAt(j-1))
	            dp[i][j]=1+dp[i-1][j-1];
	            else
	            dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
	        }
	    }
	    return dp[n1][n2];
	}
}
